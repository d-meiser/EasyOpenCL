cmake_minimum_required(VERSION 2.6.2)
project(EasyOpenCL)
set(PROJECT_VERSION_MAJOR 0)
set(PROJECT_VERSION_MINOR 0)
set(PROJECT_VERSION_PATCH 0)
set(PROJECT_VERSION_TWEAK 0)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
set(CMAKE_C_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
enable_testing()
include(CheckCCompilerFlag)
include(GenerateExportHeader)

option(ECL_BUILD_TESTS "Whether to build tests" OFF)
option(ECL_RUN_EXAMPLES_AS_TEST "Whether to run examples as tests" OFF)
option(ECL_ENABLE_COVERAGE "Instrument tests for coverage" OFF)
option(ECL_WITH_ADDRESS_SANITIZER "Whether to build with address sanitizer enabled" OFF)
option(ECL_WITH_PEDANTIC_FLAGS "Whether to compile with pedantic flags." ON)
option(ECL_WITH_WARNING_AS_ERRORS "Whether to treat compiler warnings as errors." ON)
option(ECL_ANSI_C "Whether to compile for ansi C" ON)

if (${CMAKE_VERSION} VERSION_GREATER 3.1.0)
  message(STATUS "Using FindOpenCL.cmake")
  find_package(OpenCL REQUIRED)
else ()
  message(STATUS "Using FindECLOpenCL.cmake")
  find_package(ECLOpenCL REQUIRED)
endif()

if(ECL_WITH_ADDRESS_SANITIZER)
  set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
  set(CMAKE_REQUIRED_FLAGS "-fsanitize=address")
  CHECK_C_COMPILER_FLAG(-fsanitize=address HAVE_ADDRESS_SANITIZER)
  if(HAVE_ADDRESS_SANITIZER)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address")
  endif()
  set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS})
endif()

if(CMAKE_COMPILER_IS_GNUCC OR "${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
  if(ECL_ENABLE_COVERAGE)
    add_definitions("-ftest-coverage -fprofile-arcs")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ftest-coverage -fprofile-arcs")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ftest-coverage -fprofile-arcs")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -ftest-coverage -fprofile-arcs")
    set(COV_LIBRARIES gcov)
  endif()
  if(ECL_WITH_PEDANTIC_FLAGS)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic -Wall -Wextra -Wno-format")
  endif()
  if(ECL_WITH_WARNING_AS_ERRORS)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
  endif()
  if(ECL_ANSI_C)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ansi")
  endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  add_definitions(-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS)
endif()


add_subdirectory(src)
generate_export_header(ecl_lib
    EXPORT_FILE_NAME EclExport.h
    BASE_NAME ecl
    EXPORT_MACRO_NAME ECL_API
    )
add_subdirectory(examples)
if(ECL_BUILD_TESTS)
  find_package(Cgreen REQUIRED)
  add_subdirectory(tests)
endif()

